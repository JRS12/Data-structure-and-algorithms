#include <stdio.h>
#include <stdlib.h>

// Structure for a stack node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new stack node
struct Node* createNode(int data)
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to check if the stack is empty
int isEmpty(struct Node* root)
{
    return (root == NULL);
}

// Function to push an element to the stack
void push(struct Node** root, int data)
{
    struct Node* newNode = createNode(data);
    newNode->next = *root;
    *root = newNode;
    printf("%d pushed to stack.\n", data);
}

// Function to pop an element from the stack
int pop(struct Node** root)
{
    if (isEmpty(*root)) {
        printf("Stack is empty.\n");
        return -1;
    }
    struct Node* temp = *root;
    *root = (*root)->next;
    int popped = temp->data;
    free(temp);
    return popped;
}

// Function to display the top element of the stack
int peek(struct Node* root)
{
    if (isEmpty(root)) {
        printf("Stack is empty.\n");
        return -1;
    }
    return root->data;
}

// Function to display the stack
void display(struct Node* root)
{
    if (isEmpty(root)) {
        printf("Stack is empty.\n");
        return;
    }
    struct Node* current = root;
    printf("Stack elements: ");
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

int main()
{
    struct Node* root = NULL;
    int choice, data;

    do {
        printf("Stack Operations\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            printf("Enter data to push: ");
            scanf("%d", &data);
            push(&root, data);
            break;
        case 2:
            data = pop(&root);
            if (data != -1)
                printf("Popped element: %d\n", data);
            break;
        case 3:
            data = peek(root);
            if (data != -1)
                printf("Top element: %d\n", data);
            break;
        case 4:
            display(root);
            break;
        case 5:
            printf("Exiting...\n");
            break;
        default:
            printf("Invalid choice. Please try again.\n");
        }
        printf("\n");
    } while (choice != 5);

    return 0;
}
